import streamlit as st
import PyPDF2
import re

# Configura√ß√£o da P√°gina
st.set_page_config(page_title="Validador de TR e ETP", page_icon="üìú", layout="wide")

st.title("üìú Validador de Termo de Refer√™ncia e Estudo T√©cnico Preliminar")
st.write("O sistema verifica se o Termo de Refer√™ncia (TR) e o Estudo T√©cnico Preliminar (ETP) atendem √†s exig√™ncias legais e normativas.")

# Upload dos documentos normativos e do TR/ETP para an√°lise
st.sidebar.header("üìÇ Enviar Documentos")

uploaded_normativos = st.sidebar.file_uploader(
    "Envie os normativos para base de conhecimento (PDF)", accept_multiple_files=True
)

uploaded_tr = st.sidebar.file_uploader("üìë Envie o Termo de Refer√™ncia (PDF)", type="pdf")
uploaded_etp = st.sidebar.file_uploader("üìÑ Envie o Estudo T√©cnico Preliminar (PDF)", type="pdf")

# Fun√ß√£o para extrair texto de PDFs
def extrair_texto_pdf(pdf_file):
    try:
        reader = PyPDF2.PdfReader(pdf_file)
        text = ""
        for page in reader.pages:
            text += page.extract_text() + "\n"
        return text
    except Exception as e:
        st.error(f'Erro ao ler o PDF: {e}')
        return ""

# Processa os normativos
if 'base_conhecimento' not in st.session_state:
    st.session_state['base_conhecimento'] = ""
    st.session_state['normativos_carregados'] = False

if uploaded_normativos:
    st.session_state['base_conhecimento'] = "".join(extrair_texto_pdf(file) for file in uploaded_normativos)
    st.session_state['normativos_carregados'] = True
    st.sidebar.success("Normativos carregados e salvos!")

elif st.session_state['normativos_carregados']:
    st.sidebar.info("Normativos j√° carregados na base de conhecimento.")
else:
    st.sidebar.warning("Nenhum normativo encontrado. Por favor, fa√ßa o upload.")

# Verifica se os documentos foram carregados
if not uploaded_tr and not uploaded_etp:
    st.warning("Nenhum Termo de Refer√™ncia ou Estudo T√©cnico Preliminar foi carregado. Por favor, fa√ßa o upload dos documentos.")

# Verifica o Termo de Refer√™ncia
if uploaded_tr:
    tr_texto = extrair_texto_pdf(uploaded_tr)
    st.success("Termo de Refer√™ncia carregado! Analisando...")

    # Checklist dos itens obrigat√≥rios conforme a Lei e INs
    checklist_tr = {
        "Defini√ß√£o do Objeto": bool(re.search(r"(Defini√ß√£o do Objeto|Objeto da Contrata√ß√£o)", tr_texto, re.IGNORECASE)),
        "Justificativa": bool(re.search(r"(Justificativa)", tr_texto, re.IGNORECASE)),
        "Fundamenta√ß√£o Legal": bool(re.search(r"(Fundamenta√ß√£o Legal|Base Legal|Fundamenta√ß√£o)", tr_texto, re.IGNORECASE)),
        "Especifica√ß√µes T√©cnicas": bool(re.search(r"(Especifica√ß√µes T√©cnicas|Especifica√ß√µes do Objeto|Das Especifica√ß√µes do Objeto)", tr_texto, re.IGNORECASE)),
        "Crit√©rios de Aceita√ß√£o": bool(re.search(r"(Crit√©rios de Aceita√ß√£o)", tr_texto, re.IGNORECASE)),
        "Pesquisa de Pre√ßos": bool(re.search(r"(Pesquisa de Pre√ßos|Estimativa de Custos|Estimativa de Pre√ßos|Pre√ßos Referenciais)", tr_texto, re.IGNORECASE)),
        "Resultados Esperados": bool(re.search(r"(Resultados Esperados|Metas|Resultados Esperados|Impactos Esperados)", tr_texto, re.IGNORECASE)),
        "Classifica√ß√£o de Bem Comum": bool(re.search(r"(Classifica√ß√£o de Bem Comum|Classifica√ß√£o|Bem Comum)", tr_texto, re.IGNORECASE)),
        "Garantia": bool(re.search(r"(Garantia|Assist√™ncia T√©cnica|Vig√™ncia Contratual|Vig√™ncia)", tr_texto, re.IGNORECASE)),
        "Garantia Contratual": bool(re.search(r"(Garantia Contratual)", tr_texto, re.IGNORECASE)),
        "Condi√ß√µes de Pagamento": bool(re.search(r"(Condi√ß√µes de Pagamento|Pagamento)", tr_texto, re.IGNORECASE)),
        "Parcelamento do Objeto": bool(re.search(r"(Parcelamento do Objeto|Parcelamento|Do Parcelamento)", tr_texto, re.IGNORECASE)),
    }

    # Exibir checklist do TR
    st.subheader("üìã Checklist do Termo de Refer√™ncia")
    for item, presente in checklist_tr.items():
        st.write(f"- {item}: {'‚úÖ Presente' if presente else '‚ùå Ausente'}")

# Verifica o Estudo T√©cnico Preliminar
if uploaded_etp:
    etp_texto = extrair_texto_pdf(uploaded_etp)
    st.success("Estudo T√©cnico Preliminar carregado! Analisando...")

    # Checklist dos itens obrigat√≥rios conforme normativas
    checklist_etp = {
        "Introdu√ß√£o": bool(re.search(r"(Introdu√ß√£o|Objeto|)", etp_texto, re.IGNORECASE)),
        "Descri√ß√£o da Necessidade": bool(re.search(r"(Descri√ß√£o da Necessidade|Motiva√ß√£o|Justificativa|Detalhes|Descri√ß√£o)", etp_texto, re.IGNORECASE)),
        "Defini√ß√£o e Especifica√ß√£o dos Requisitos": bool(re.search(r"(Defini√ß√£o e Especifica√ß√£o dos Requisitos|Defini√ß√£o e Especifica√ß√£o das Necessidades e Requisitos|Especifica√ß√£o do Objeto)", etp_texto, re.IGNORECASE)),
        "Alternativas de Mercado": bool(re.search(r"(Alternativas de Mercado|Alternativas do Mercado)", etp_texto, re.IGNORECASE)),
        "Detalhamento da Solu√ß√£o": bool(re.search(r"(Detalhamento da Solu√ß√£o|Solu√ß√£o)", etp_texto, re.IGNORECASE)),
        "Justificativa da Solu√ß√£o Escolhida": bool(re.search(r"(Justificativa da Solu√ß√£o Escolhida|Justificativa do Cen√°rio( Escolhido)?)", etp_texto, re.IGNORECASE)),
        "Pesquisa de Pre√ßos": bool(re.search(r"(Pesquisa de Pre√ßos|Estimativa de Custos|Estimativa do Custo Total)", etp_texto, re.IGNORECASE)),
        "Alternativas Analisadas": bool(re.search(r"(Alternativas Analisadas|Alternativas de Mercado)", etp_texto, re.IGNORECASE)),
        "Viabilidade T√©cnica e Econ√¥mica": bool(re.search(r"(Viabilidade T√©cnica e Econ√¥mica)", etp_texto, re.IGNORECASE)),
        

    }

    # Exibir checklist do ETP
    st.subheader("üìã Checklist do Estudo T√©cnico Preliminar")
    for item, presente in checklist_etp.items():
        st.write(f"- {item}: {'‚úÖ Presente' if presente else '‚ùå Ausente'}")

# Gera√ß√£o do relat√≥rio final
if uploaded_tr or uploaded_etp:
    st.subheader("üìÑ Conclus√£o")
    tr_ok = all(checklist_tr.values()) if uploaded_tr else True
    etp_ok = all(checklist_etp.values()) if uploaded_etp else True

    if tr_ok and etp_ok:
        st.success("O Termo de Refer√™ncia e o Estudo T√©cnico Preliminar est√£o completos e podem seguir para a pr√≥xima etapa. ‚úÖ")
    else:
        st.error("O Termo de Refer√™ncia ou o Estudo T√©cnico Preliminar precisam ser corrigidos antes de seguir. ‚ùå")
        if uploaded_tr:
            faltantes_tr = [item for item, presente in checklist_tr.items() if not presente]
            if faltantes_tr:
                st.write("Itens ausentes no Termo de Refer√™ncia (TR):")
                for item in faltantes_tr:
                    st.write(f"- ‚ùå {item}")
        if uploaded_etp:
            faltantes_etp = [item for item, presente in checklist_etp.items() if not presente]
            if faltantes_etp:
                st.write("Itens ausentes no Estudo T√©cnico Preliminar (ETP):")
                for item in faltantes_etp:
                    st.write(f"- ‚ùå {item}")
